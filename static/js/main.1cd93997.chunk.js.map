{"version":3,"sources":["utils/api.js","components/genPK.jsx","App.js","index.js"],"names":["getUtxosFromBitIndex","address","a","options","method","headers","uri","body","addrs","json","timeout","request","utxos","sort","b","confirmations","spendableUtxos","i","length","push","bsv","Transaction","UnspentOutput","script","Script","satoshis","outputIndex","txid","getTx","transactionHex","response","console","log","GeneratePK","props","handleChange","e","setState","value","target","handleChange2","value2","handleSubmit","preventDefault","pubKey","PublicKey","fromHex","state","bitcoinAddress","toAddress","toString","properFormatPubKey","error","handleGetTxButton","isRequesting","txId","fundingTx","transaction","from","change","window","tx","tx0","tx1","properFormatSig","this","Label","basic","color","pointing","className","Divider","hidden","size","href","Button","content","onClick","loading","TextArea","JSON","stringify","style","minHeight","width","toJSON","Grid","textAlign","height","verticalAlign","Column","maxWidth","Header","as","Image","src","displayFormatLabelPubKey","Form","onSubmit","Input","action","placeholder","justifyContent","onChange","displayQRCode","displayJSONTXs","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cd93997.chunk.js","sourcesContent":["import { DEBUG } from \"./config\";\nimport bsv from \"bsv\";\nimport request from \"request-promise-native\";\n\n// auxiliary, mostly for testing purposes to simulate delays\nexport function wait(t) {\n  return new Promise(r => setTimeout(r, t));\n}\n\nexport const sendPointsToServer = async server => {\n  if (DEBUG) {\n    console.log(`Sending points to ${server}`);\n  }\n};\n\nexport const getPointsFromServer = async server => {\n  if (DEBUG) {\n    console.log(`Sending request to get points from ${server}`);\n  }\n};\n\nexport async function getUtxosFromBitIndex(address) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    uri: \"https://api.bitindex.network/api/addrs/utxo\",\n    body: {\n      addrs: address\n    },\n    json: true,\n    timeout: 5000\n  };\n\n  try {\n    let utxos = await request(options);\n\n    // Sort these in descending order of confirmation (oldest first)...\n    utxos.sort((a, b) => b.confirmations - a.confirmations);\n\n    const spendableUtxos = [];\n\n    for (let i = 0; i < utxos.length; i++) {\n      let include = true;\n      // if (utxos[i].confirmations < 100) {\n      //   // Check if this is a coinbase\n      //   const tx = await getRawTransaction('BSV', utxos[i].txid)\n      //   if (tx.vin[utxos[i].vout].coinbase) {\n      //     include = false\n      //   }\n      // }\n      if (include) {\n        spendableUtxos.push(\n          new bsv.Transaction.UnspentOutput({\n            address: utxos[i].address,\n            script: bsv.Script(utxos[i].script),\n            satoshis: utxos[i].satoshis,\n            outputIndex: utxos[i].outputIndex,\n            txid: utxos[i].txid\n          })\n        );\n      }\n    }\n\n    return spendableUtxos;\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function broadcastTx(transactionHex) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    uri: \"https://api.whatsonchain.com/v1/bsv/main/tx/raw\",\n    body: {\n      txhex: transactionHex\n    },\n    json: true,\n    timeout: 5000\n  };\n\n  try {\n    let response = await request(options);\n\n    console.log(\"WOC response (TxID)\");\n    console.log(response);\n\n    return response;\n  } catch (err) {\n    throw err;\n  }\n}\n\n// GET https://api.whatsonchain.com/v1/bsv/<network>/tx/hash/<hash>\nexport async function getTx(transactionHex) {\n  const options = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    uri: `https://api.whatsonchain.com/v1/bsv/main/tx/hash/${transactionHex}`,\n    json: true,\n    timeout: 5000\n  };\n\n  try {\n    let response = await request(options);\n\n    console.log(\"WOC response (TxID)\");\n    console.log(response);\n\n    return response;\n  } catch (err) {\n    throw err;\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Divider,\n  Input,\n  Label,\n  TextArea\n} from \"semantic-ui-react\";\nimport QRCode from \"qrcode.react\";\nimport bsv from \"bsv\";\nimport { getUtxosFromBitIndex, getTx } from \"../utils/api\";\n\nvar _ = {};\n_.each = (a, f) => a.forEach(f);\n\nvar Signature = {\n  SIGHASH_ALL: 0x01,\n  SIGHASH_NONE: 0x02,\n  SIGHASH_SINGLE: 0x03,\n  SIGHASH_FORKID: 0x40,\n  SIGHASH_ANYONECANPAY: 0x80\n};\n\nclass GeneratePK extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isRequesting: false,\n      properFormatPubKey: true,\n      properFormatSig: true,\n      value: \"\",\n      value2: \"\",\n      bitcoinAddress: \"\",\n      pubKey: \"\",\n      tx0: \"\",\n      tx1: \"\"\n    };\n  }\n\n  //   state = {};\n\n  // Show label invalid public key\n  displayFormatLabelPubKey() {\n    if (this.state.properFormatPubKey) {\n      return \"\";\n    } else {\n      return (\n        <Label basic color=\"red\" pointing=\"below\">\n          Please enter a valid public key in compressed form\n        </Label>\n      );\n    }\n  }\n\n  // Show label invalid sig\n  displayFormatLabelSig() {\n    if (this.state.properFormatSig) {\n      return \"\";\n    } else {\n      return (\n        <Label basic color=\"red\" pointing=\"below\">\n          Please enter a valid signature in hex\n        </Label>\n      );\n    }\n  }\n\n  // Show QR code\n  displayQRCode() {\n    if (this.state.bitcoinAddress) {\n      return (\n        <div>\n          <div className=\"row\">\n            <Divider hidden />\n            <p>{this.state.bitcoinAddress}</p>\n            <QRCode value={`bitcoin:${this.state.bitcoinAddress}`} size={200} />\n          </div>\n          <div className=\"row\">\n            <a\n              className=\"btn btn-primary\"\n              target=\"_blank\"\n              href={`https://www.whatsonchain.com/address/${this.state.bitcoinAddress}`}\n            >\n              What's on chain!\n            </a>\n          </div>\n          <Divider hidden />\n          <Button\n            color=\"blue\"\n            content={\"Get Transactions\"}\n            onClick={this.handleGetTxButton}\n            loading={this.state.isRequesting}\n            size=\"huge\"\n          />\n        </div>\n      );\n    } else {\n      return \"\";\n    }\n  }\n\n  displayJSONTXs() {\n    if (this.state.tx0 && this.state.tx1) {\n      return (\n        <div className=\"row\">\n          <Divider hidden />\n          <Label pointing=\"below\">Funding Tx (TX0)</Label>\n          <TextArea\n            value={JSON.stringify(this.state.tx0)}\n            style={{ minHeight: 150, width: \"550px\" }}\n          />\n          <Label pointing=\"below\">Unsigned Tx (TX1)</Label>\n          <TextArea\n            value={JSON.stringify(this.state.tx1.toJSON())}\n            style={{ minHeight: 150, width: \"550px\" }}\n          />\n        </div>\n      );\n    } else {\n      return \"\";\n    }\n  }\n\n  handleChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  handleChange2 = e => {\n    this.setState({\n      value2: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    if (e) {\n      e.preventDefault();\n    }\n    try {\n      var pubKey = bsv.PublicKey.fromHex(this.state.value);\n\n      this.setState({\n        pubKey: pubKey,\n        bitcoinAddress: pubKey.toAddress().toString(),\n        properFormatPubKey: true\n      });\n    } catch (error) {\n      this.setState({ properFormatPubKey: false });\n    }\n  };\n\n  handleGetTxButton = async e => {\n    if (e) {\n      e.preventDefault();\n    }\n\n    this.setState({ isRequesting: true });\n    let utxos = await getUtxosFromBitIndex(this.state.bitcoinAddress);\n    this.setState({ isRequesting: false });\n\n    let fundingTx = await getTx(utxos[0].txId);\n\n    var pubKey = this.state.pubKey;\n\n    var transaction = new bsv.Transaction()\n      .from(utxos) // Feed information about what unspent outputs one can use\n      // .addData(\"THRESHOLD SIGNATURE TRANSACTION TEST DEMO!\") // Add OP_RETURN data\n      .change(pubKey);\n\n    window.tx = transaction;\n\n    this.setState({\n      tx0: fundingTx,\n      tx1: transaction\n    });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"50vh\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 675 }}>\n          <Header as=\"h2\" color=\"blue\" textAlign=\"center\" size=\"huge\">\n            <Image src=\"https://pbs.twimg.com/profile_images/1072445043569516544/5nUSQ-4_.jpg\" />{\" \"}\n            Threshold Signature Scheme\n          </Header>\n\n          <Divider></Divider>\n\n          {this.displayFormatLabelPubKey}\n          <Form onSubmit={this.handleSubmit}>\n            <Input\n              action={{\n                content: \"QR Code\",\n                onClick: () => this.handleSubmit()\n              }}\n              placeholder=\"Public Key in compressed format\"\n              style={{ justifyContent: \"center\", width: \"535px\" }}\n              onChange={this.handleChange}\n            />\n          </Form>\n\n          {this.displayQRCode()}\n\n          {this.displayJSONTXs()}\n\n          {/* <Input\n            action={{\n              color: \"teal\",\n              labelPosition: \"right\",\n              icon: \"copy\",\n              content: \"Copy\"\n            }}\n            defaultValue=\"http://ww.short.url/c0opq\"\n          /> */}\n\n          {/* ----------- */}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default GeneratePK;\n","import React from \"react\";\nimport GeneratePK from \"./components/genPK\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nfunction App() {\n  return <GeneratePK />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}